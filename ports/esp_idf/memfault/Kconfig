menu "Memfault"

    config MEMFAULT_PROJECT_KEY
        string "Memfault Project key"
        default ""
        help
          API Key needed to communicate to Memfault. Obtain key at https://mflt.io/project-key

    config MEMFAULT_EVENT_STORAGE_RAM_SIZE
        int "The amount of RAM storage to reserve for Memfault Events"
        default 512

    config MEMFAULT_LOG_STORAGE_RAM_SIZE
        int "The amount of RAM storage to allocate for log storage"
        default 1024
        help
            Logs stored in this buffer will be captured as part of a Memfault Coredump

    config MEMFAULT_CLI_ENABLED
        bool "Enables the Memfault CLI"
        default y
        help
            By default, Memfault will register CLI commands for pushing data,
            dumping state of the SDK, and performing device updates.

    config MEMFAULT_COREDUMP_USE_OTA_SLOT
        bool "Enables the use of an OTA slot for coredump storage"
        default n
        help
            By default, Memfault will attempt to use a coredump partition
            defined in a partitions*.csv file. If the device has already
            been shipped and the partition table cannot be modified, an
            OTA slot can be used instead.

    config MEMFAULT_COREDUMP_STORAGE_MAX_SIZE
        int "The maximum size of a coredump (0=partition max size)"
        default 0
        help
            The maximum size of a coredump. If a coredump is larger than this
            size, it will be truncated to this size. Must be aligned to
            SPI_FLASH_SEC_SIZE. When set to =0 (the default), Memfault will
            attempt to capture the entire RAM region of the device, up to the
            maximum size of the `coredump` region. If it's desirable to
            artificially reduce the utilized space in the `coredump` partition,
            setting a non-zero value will cause the Memfault ESP-IDF port's
            'memfault_platform_coredump_storage_get_info()' function to return
            the threshold value set here as the size of the partition..

    config MEMFAULT_AUTOMATIC_INIT
        bool "[DEPRECATED] Automatically initialize the SDK when the system is booted"
        default n
        help
            By default, the user is required to initialize the SDK by calling
            `memfault_boot`. This option is deprecated and not supported.
            A build error will be generated when enabling this option.

    menu "Builtin device info implementation"

    config MEMFAULT_DEFAULT_GET_DEVICE_INFO
        bool "Enables the default memfault_platform_get_device_info() implementation"
        default y
        help
            Enable a default implementation of
            memfault_platform_get_device_info(). Disable this config to
            implement a custom version of the function.

    config MEMFAULT_DEVICE_INFO_HARDWARE_VERSION
        string "Hardware version used in memfault_esp_port_get_device_info()"
        default "$(IDF_TARGET)-proto"

    config MEMFAULT_DEVICE_INFO_SOFTWARE_VERSION
        string "Software version used in memfault_esp_port_get_device_info()"
        default "1.0.0-dev"

    config MEMFAULT_DEVICE_INFO_SOFTWARE_TYPE
        string "Software type used in memfault_esp_port_get_device_info()"
        default "esp32-main"

    endmenu  # Builtin device info implementation

    config MEMFAULT_PLATFORM_CONFIG_FILE
        string "Name of the Memfault platform config file"
        default "memfault_platform_config.h"
        help
            The name of the file which contains the Memfault platform config
            options. This file must be included in the project's include path.

    config MEMFAULT_USER_CONFIG_SILENT_FAIL
        bool "Continue with build even if user configuration of Memfault SDK is missing"
        default y
        help
          When enabled, __has_include is used to conditionally include the three Memfault
          configuration files to a port if they exist instead of failing to compile if
          they do not:
          memfault_platform_config.h
          memfault_metrics_heartbeat_config.def
          memfault_trace_reason_user_config.def

    config MEMFAULT_HTTP_CLIENT_ENABLE
        bool "Enables the Memfault HTTP client"
        default y
        help
            Enable the Memfault HTTP client. Disable this config to implement a
            custom version of the function.

    config MEMFAULT_HTTP_CLIENT_TIMEOUT_MS
        int "The HTTP client timeout in milliseconds"
        default 5000
        help
            The Memfault HTTP client timeout in milliseconds. This is the
            maximum amount of time the HTTP client will wait for a response from
            the server.

    config MEMFAULT_LWIP_METRICS
        bool "Collect TCP/UDP metrics from LwIP"
        default y
        select LWIP_STATS

    config MEMFAULT_FREERTOS_TASK_RUNTIME_STATS
        bool "Enables the collection of freeRTOS task runtime stats as Memfault metrics"
        default y
        select FREERTOS_GENERATE_RUN_TIME_STATS
        help
            Collects the idle thread runtime metric as a percentage of total runtime.
            This metric is only available when using esp_timer for runtime stats to
            avoid issues with counter overflow. Note for FreeRTOS versions < 10.2.0
            this will be a no-op.

    config MEMFAULT_MBEDTLS_METRICS
        bool "Collect metrics from mbedTLS"
        default y
        depends on ESP_TLS_USING_MBEDTLS && !MBEDTLS_CUSTOM_MEM_ALLOC
        help
            Collects metrics measuring current and maximum bytes allocated on the heap
            during the current heartbeat interval.

    config MEMFAULT_ESP_WIFI_METRICS
        bool "Collect metrics from ESP WiFi"
        default y
        help
            Collects Memfault metrics measuring the minimum RSSI, time connected to
            WiFi, and the number of WiFi disconnects.

    config MEMFAULT_ESP_HEAP_METRICS
        bool "Collect basic heap metrics"
        default y
        help
            Collects Memfault metrics for basic heap utilization.
endmenu
